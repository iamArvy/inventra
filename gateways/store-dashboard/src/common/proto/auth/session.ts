// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v3.21.12
// source: auth/session.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import type { handleUnaryCall, UntypedServiceImplementation } from "@grpc/grpc-js";
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";
import { Empty } from "../google/protobuf/empty";
import { Id, Status } from "./common";

export const protobufPackage = "auth";

export interface SessionData {
  id: string;
  userAgent: string;
  ipAddress: string;
  createdAt: string;
}

export interface SessionList {
  sessions: SessionData[];
}

export const AUTH_PACKAGE_NAME = "auth";

function createBaseSessionData(): SessionData {
  return { id: "", userAgent: "", ipAddress: "", createdAt: "" };
}

export const SessionData: MessageFns<SessionData> = {
  encode(message: SessionData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.userAgent !== "") {
      writer.uint32(18).string(message.userAgent);
    }
    if (message.ipAddress !== "") {
      writer.uint32(26).string(message.ipAddress);
    }
    if (message.createdAt !== "") {
      writer.uint32(34).string(message.createdAt);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SessionData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSessionData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.userAgent = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.ipAddress = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.createdAt = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseSessionList(): SessionList {
  return { sessions: [] };
}

export const SessionList: MessageFns<SessionList> = {
  encode(message: SessionList, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.sessions) {
      SessionData.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SessionList {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSessionList();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.sessions.push(SessionData.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

export interface SessionServiceClient {
  health(request: Empty): Observable<Status>;

  getAllUserSessions(request: Id): Observable<SessionList>;

  logoutOtherUserSession(request: Id): Observable<Status>;

  get(request: Id): Observable<SessionData>;
}

export interface SessionServiceController {
  health(request: Empty): Promise<Status> | Observable<Status> | Status;

  getAllUserSessions(request: Id): Promise<SessionList> | Observable<SessionList> | SessionList;

  logoutOtherUserSession(request: Id): Promise<Status> | Observable<Status> | Status;

  get(request: Id): Promise<SessionData> | Observable<SessionData> | SessionData;
}

export function SessionServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["health", "getAllUserSessions", "logoutOtherUserSession", "get"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("SessionService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("SessionService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const SESSION_SERVICE_NAME = "SessionService";

export type SessionServiceService = typeof SessionServiceService;
export const SessionServiceService = {
  health: {
    path: "/auth.SessionService/Health",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: Empty): Buffer => Buffer.from(Empty.encode(value).finish()),
    requestDeserialize: (value: Buffer): Empty => Empty.decode(value),
    responseSerialize: (value: Status): Buffer => Buffer.from(Status.encode(value).finish()),
    responseDeserialize: (value: Buffer): Status => Status.decode(value),
  },
  getAllUserSessions: {
    path: "/auth.SessionService/GetAllUserSessions",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: Id): Buffer => Buffer.from(Id.encode(value).finish()),
    requestDeserialize: (value: Buffer): Id => Id.decode(value),
    responseSerialize: (value: SessionList): Buffer => Buffer.from(SessionList.encode(value).finish()),
    responseDeserialize: (value: Buffer): SessionList => SessionList.decode(value),
  },
  logoutOtherUserSession: {
    path: "/auth.SessionService/LogoutOtherUserSession",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: Id): Buffer => Buffer.from(Id.encode(value).finish()),
    requestDeserialize: (value: Buffer): Id => Id.decode(value),
    responseSerialize: (value: Status): Buffer => Buffer.from(Status.encode(value).finish()),
    responseDeserialize: (value: Buffer): Status => Status.decode(value),
  },
  get: {
    path: "/auth.SessionService/Get",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: Id): Buffer => Buffer.from(Id.encode(value).finish()),
    requestDeserialize: (value: Buffer): Id => Id.decode(value),
    responseSerialize: (value: SessionData): Buffer => Buffer.from(SessionData.encode(value).finish()),
    responseDeserialize: (value: Buffer): SessionData => SessionData.decode(value),
  },
} as const;

export interface SessionServiceServer extends UntypedServiceImplementation {
  health: handleUnaryCall<Empty, Status>;
  getAllUserSessions: handleUnaryCall<Id, SessionList>;
  logoutOtherUserSession: handleUnaryCall<Id, Status>;
  get: handleUnaryCall<Id, SessionData>;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
}
