// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v3.21.12
// source: auth/auth.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import type { handleUnaryCall, UntypedServiceImplementation } from "@grpc/grpc-js";
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";
import { Empty } from "../google/protobuf/empty";
import { Status, TokenData, TokenRequest } from "./common";

export const protobufPackage = "auth";

export interface RegisterData {
  name: string;
  email: string;
  password: string;
}

export interface RegisterRequest {
  storeId: string;
  data: RegisterData | undefined;
  userAgent: string;
  ipAddress: string;
}

export interface AuthResponse {
  access: TokenData | undefined;
  refresh: TokenData | undefined;
}

export interface IsEmailVerifiedResponse {
  verified: boolean;
}

export interface LoginData {
  email: string;
  password: string;
}

export interface LoginRequest {
  data: LoginData | undefined;
  userAgent: string;
  ipAddress: string;
}

export interface ClientTokenRequest {
  id: string;
  secret: string;
}

export const AUTH_PACKAGE_NAME = "auth";

function createBaseRegisterData(): RegisterData {
  return { name: "", email: "", password: "" };
}

export const RegisterData: MessageFns<RegisterData> = {
  encode(message: RegisterData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.email !== "") {
      writer.uint32(18).string(message.email);
    }
    if (message.password !== "") {
      writer.uint32(26).string(message.password);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RegisterData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRegisterData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.email = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.password = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseRegisterRequest(): RegisterRequest {
  return { storeId: "", data: undefined, userAgent: "", ipAddress: "" };
}

export const RegisterRequest: MessageFns<RegisterRequest> = {
  encode(message: RegisterRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.storeId !== "") {
      writer.uint32(10).string(message.storeId);
    }
    if (message.data !== undefined) {
      RegisterData.encode(message.data, writer.uint32(18).fork()).join();
    }
    if (message.userAgent !== "") {
      writer.uint32(26).string(message.userAgent);
    }
    if (message.ipAddress !== "") {
      writer.uint32(34).string(message.ipAddress);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RegisterRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRegisterRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.storeId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.data = RegisterData.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.userAgent = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.ipAddress = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseAuthResponse(): AuthResponse {
  return { access: undefined, refresh: undefined };
}

export const AuthResponse: MessageFns<AuthResponse> = {
  encode(message: AuthResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.access !== undefined) {
      TokenData.encode(message.access, writer.uint32(10).fork()).join();
    }
    if (message.refresh !== undefined) {
      TokenData.encode(message.refresh, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AuthResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAuthResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.access = TokenData.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.refresh = TokenData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseIsEmailVerifiedResponse(): IsEmailVerifiedResponse {
  return { verified: false };
}

export const IsEmailVerifiedResponse: MessageFns<IsEmailVerifiedResponse> = {
  encode(message: IsEmailVerifiedResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.verified !== false) {
      writer.uint32(8).bool(message.verified);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): IsEmailVerifiedResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseIsEmailVerifiedResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.verified = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseLoginData(): LoginData {
  return { email: "", password: "" };
}

export const LoginData: MessageFns<LoginData> = {
  encode(message: LoginData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.email !== "") {
      writer.uint32(10).string(message.email);
    }
    if (message.password !== "") {
      writer.uint32(18).string(message.password);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LoginData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLoginData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.email = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.password = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseLoginRequest(): LoginRequest {
  return { data: undefined, userAgent: "", ipAddress: "" };
}

export const LoginRequest: MessageFns<LoginRequest> = {
  encode(message: LoginRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      LoginData.encode(message.data, writer.uint32(10).fork()).join();
    }
    if (message.userAgent !== "") {
      writer.uint32(18).string(message.userAgent);
    }
    if (message.ipAddress !== "") {
      writer.uint32(26).string(message.ipAddress);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LoginRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLoginRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = LoginData.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.userAgent = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.ipAddress = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseClientTokenRequest(): ClientTokenRequest {
  return { id: "", secret: "" };
}

export const ClientTokenRequest: MessageFns<ClientTokenRequest> = {
  encode(message: ClientTokenRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.secret !== "") {
      writer.uint32(18).string(message.secret);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ClientTokenRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseClientTokenRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.secret = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

export interface AuthServiceClient {
  health(request: Empty): Observable<Status>;

  register(request: RegisterRequest): Observable<AuthResponse>;

  login(request: LoginRequest): Observable<AuthResponse>;

  refreshToken(request: TokenRequest): Observable<TokenData>;

  getClientToken(request: ClientTokenRequest): Observable<TokenData>;

  logout(request: TokenRequest): Observable<Status>;
}

export interface AuthServiceController {
  health(request: Empty): Promise<Status> | Observable<Status> | Status;

  register(request: RegisterRequest): Promise<AuthResponse> | Observable<AuthResponse> | AuthResponse;

  login(request: LoginRequest): Promise<AuthResponse> | Observable<AuthResponse> | AuthResponse;

  refreshToken(request: TokenRequest): Promise<TokenData> | Observable<TokenData> | TokenData;

  getClientToken(request: ClientTokenRequest): Promise<TokenData> | Observable<TokenData> | TokenData;

  logout(request: TokenRequest): Promise<Status> | Observable<Status> | Status;
}

export function AuthServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["health", "register", "login", "refreshToken", "getClientToken", "logout"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("AuthService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("AuthService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const AUTH_SERVICE_NAME = "AuthService";

export type AuthServiceService = typeof AuthServiceService;
export const AuthServiceService = {
  health: {
    path: "/auth.AuthService/Health",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: Empty): Buffer => Buffer.from(Empty.encode(value).finish()),
    requestDeserialize: (value: Buffer): Empty => Empty.decode(value),
    responseSerialize: (value: Status): Buffer => Buffer.from(Status.encode(value).finish()),
    responseDeserialize: (value: Buffer): Status => Status.decode(value),
  },
  register: {
    path: "/auth.AuthService/Register",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: RegisterRequest): Buffer => Buffer.from(RegisterRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): RegisterRequest => RegisterRequest.decode(value),
    responseSerialize: (value: AuthResponse): Buffer => Buffer.from(AuthResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): AuthResponse => AuthResponse.decode(value),
  },
  login: {
    path: "/auth.AuthService/Login",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: LoginRequest): Buffer => Buffer.from(LoginRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): LoginRequest => LoginRequest.decode(value),
    responseSerialize: (value: AuthResponse): Buffer => Buffer.from(AuthResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): AuthResponse => AuthResponse.decode(value),
  },
  refreshToken: {
    path: "/auth.AuthService/RefreshToken",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: TokenRequest): Buffer => Buffer.from(TokenRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): TokenRequest => TokenRequest.decode(value),
    responseSerialize: (value: TokenData): Buffer => Buffer.from(TokenData.encode(value).finish()),
    responseDeserialize: (value: Buffer): TokenData => TokenData.decode(value),
  },
  getClientToken: {
    path: "/auth.AuthService/GetClientToken",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: ClientTokenRequest): Buffer => Buffer.from(ClientTokenRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): ClientTokenRequest => ClientTokenRequest.decode(value),
    responseSerialize: (value: TokenData): Buffer => Buffer.from(TokenData.encode(value).finish()),
    responseDeserialize: (value: Buffer): TokenData => TokenData.decode(value),
  },
  logout: {
    path: "/auth.AuthService/Logout",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: TokenRequest): Buffer => Buffer.from(TokenRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): TokenRequest => TokenRequest.decode(value),
    responseSerialize: (value: Status): Buffer => Buffer.from(Status.encode(value).finish()),
    responseDeserialize: (value: Buffer): Status => Status.decode(value),
  },
} as const;

export interface AuthServiceServer extends UntypedServiceImplementation {
  health: handleUnaryCall<Empty, Status>;
  register: handleUnaryCall<RegisterRequest, AuthResponse>;
  login: handleUnaryCall<LoginRequest, AuthResponse>;
  refreshToken: handleUnaryCall<TokenRequest, TokenData>;
  getClientToken: handleUnaryCall<ClientTokenRequest, TokenData>;
  logout: handleUnaryCall<TokenRequest, Status>;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
}
