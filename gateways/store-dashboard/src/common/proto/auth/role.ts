// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v3.21.12
// source: auth/role.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import type { handleUnaryCall, UntypedServiceImplementation } from "@grpc/grpc-js";
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";
import { Empty } from "../google/protobuf/empty";
import { Id, PermissionsOperations, Status } from "./common";

export const protobufPackage = "auth";

export interface CreateRoleData {
  name: string;
  description?: string | undefined;
}

export interface CreateRoleInput {
  id: string;
  data: CreateRoleData | undefined;
  permissions: string[];
}

export interface UpdateRoleData {
  name?: string | undefined;
  description?: string | undefined;
}

export interface UpdateRoleInput {
  id: string;
  data: UpdateRoleData | undefined;
}

export interface RoleData {
  id: string;
  name: string;
  description: string;
  storeId: string;
  createdAt: string;
}

export interface RoleList {
  roles: RoleData[];
}

export const AUTH_PACKAGE_NAME = "auth";

function createBaseCreateRoleData(): CreateRoleData {
  return { name: "" };
}

export const CreateRoleData: MessageFns<CreateRoleData> = {
  encode(message: CreateRoleData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.description !== undefined) {
      writer.uint32(18).string(message.description);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateRoleData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateRoleData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.description = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseCreateRoleInput(): CreateRoleInput {
  return { id: "", data: undefined, permissions: [] };
}

export const CreateRoleInput: MessageFns<CreateRoleInput> = {
  encode(message: CreateRoleInput, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.data !== undefined) {
      CreateRoleData.encode(message.data, writer.uint32(18).fork()).join();
    }
    for (const v of message.permissions) {
      writer.uint32(26).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateRoleInput {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateRoleInput();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.data = CreateRoleData.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.permissions.push(reader.string());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseUpdateRoleData(): UpdateRoleData {
  return {};
}

export const UpdateRoleData: MessageFns<UpdateRoleData> = {
  encode(message: UpdateRoleData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== undefined) {
      writer.uint32(10).string(message.name);
    }
    if (message.description !== undefined) {
      writer.uint32(18).string(message.description);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateRoleData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateRoleData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.description = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseUpdateRoleInput(): UpdateRoleInput {
  return { id: "", data: undefined };
}

export const UpdateRoleInput: MessageFns<UpdateRoleInput> = {
  encode(message: UpdateRoleInput, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.data !== undefined) {
      UpdateRoleData.encode(message.data, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateRoleInput {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateRoleInput();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.data = UpdateRoleData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseRoleData(): RoleData {
  return { id: "", name: "", description: "", storeId: "", createdAt: "" };
}

export const RoleData: MessageFns<RoleData> = {
  encode(message: RoleData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.description !== "") {
      writer.uint32(26).string(message.description);
    }
    if (message.storeId !== "") {
      writer.uint32(34).string(message.storeId);
    }
    if (message.createdAt !== "") {
      writer.uint32(42).string(message.createdAt);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RoleData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRoleData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.storeId = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.createdAt = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseRoleList(): RoleList {
  return { roles: [] };
}

export const RoleList: MessageFns<RoleList> = {
  encode(message: RoleList, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.roles) {
      RoleData.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RoleList {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRoleList();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.roles.push(RoleData.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

export interface RoleServiceClient {
  health(request: Empty): Observable<Status>;

  create(request: CreateRoleInput): Observable<RoleData>;

  update(request: UpdateRoleInput): Observable<Status>;

  find(request: Id): Observable<RoleData>;

  list(request: Id): Observable<RoleList>;

  attachPermissions(request: PermissionsOperations): Observable<Status>;

  detachPermissions(request: PermissionsOperations): Observable<Status>;

  delete(request: Id): Observable<Status>;
}

export interface RoleServiceController {
  health(request: Empty): Promise<Status> | Observable<Status> | Status;

  create(request: CreateRoleInput): Promise<RoleData> | Observable<RoleData> | RoleData;

  update(request: UpdateRoleInput): Promise<Status> | Observable<Status> | Status;

  find(request: Id): Promise<RoleData> | Observable<RoleData> | RoleData;

  list(request: Id): Promise<RoleList> | Observable<RoleList> | RoleList;

  attachPermissions(request: PermissionsOperations): Promise<Status> | Observable<Status> | Status;

  detachPermissions(request: PermissionsOperations): Promise<Status> | Observable<Status> | Status;

  delete(request: Id): Promise<Status> | Observable<Status> | Status;
}

export function RoleServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = [
      "health",
      "create",
      "update",
      "find",
      "list",
      "attachPermissions",
      "detachPermissions",
      "delete",
    ];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("RoleService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("RoleService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const ROLE_SERVICE_NAME = "RoleService";

export type RoleServiceService = typeof RoleServiceService;
export const RoleServiceService = {
  health: {
    path: "/auth.RoleService/Health",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: Empty): Buffer => Buffer.from(Empty.encode(value).finish()),
    requestDeserialize: (value: Buffer): Empty => Empty.decode(value),
    responseSerialize: (value: Status): Buffer => Buffer.from(Status.encode(value).finish()),
    responseDeserialize: (value: Buffer): Status => Status.decode(value),
  },
  create: {
    path: "/auth.RoleService/Create",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: CreateRoleInput): Buffer => Buffer.from(CreateRoleInput.encode(value).finish()),
    requestDeserialize: (value: Buffer): CreateRoleInput => CreateRoleInput.decode(value),
    responseSerialize: (value: RoleData): Buffer => Buffer.from(RoleData.encode(value).finish()),
    responseDeserialize: (value: Buffer): RoleData => RoleData.decode(value),
  },
  update: {
    path: "/auth.RoleService/Update",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: UpdateRoleInput): Buffer => Buffer.from(UpdateRoleInput.encode(value).finish()),
    requestDeserialize: (value: Buffer): UpdateRoleInput => UpdateRoleInput.decode(value),
    responseSerialize: (value: Status): Buffer => Buffer.from(Status.encode(value).finish()),
    responseDeserialize: (value: Buffer): Status => Status.decode(value),
  },
  find: {
    path: "/auth.RoleService/Find",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: Id): Buffer => Buffer.from(Id.encode(value).finish()),
    requestDeserialize: (value: Buffer): Id => Id.decode(value),
    responseSerialize: (value: RoleData): Buffer => Buffer.from(RoleData.encode(value).finish()),
    responseDeserialize: (value: Buffer): RoleData => RoleData.decode(value),
  },
  list: {
    path: "/auth.RoleService/List",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: Id): Buffer => Buffer.from(Id.encode(value).finish()),
    requestDeserialize: (value: Buffer): Id => Id.decode(value),
    responseSerialize: (value: RoleList): Buffer => Buffer.from(RoleList.encode(value).finish()),
    responseDeserialize: (value: Buffer): RoleList => RoleList.decode(value),
  },
  attachPermissions: {
    path: "/auth.RoleService/AttachPermissions",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: PermissionsOperations): Buffer =>
      Buffer.from(PermissionsOperations.encode(value).finish()),
    requestDeserialize: (value: Buffer): PermissionsOperations => PermissionsOperations.decode(value),
    responseSerialize: (value: Status): Buffer => Buffer.from(Status.encode(value).finish()),
    responseDeserialize: (value: Buffer): Status => Status.decode(value),
  },
  detachPermissions: {
    path: "/auth.RoleService/DetachPermissions",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: PermissionsOperations): Buffer =>
      Buffer.from(PermissionsOperations.encode(value).finish()),
    requestDeserialize: (value: Buffer): PermissionsOperations => PermissionsOperations.decode(value),
    responseSerialize: (value: Status): Buffer => Buffer.from(Status.encode(value).finish()),
    responseDeserialize: (value: Buffer): Status => Status.decode(value),
  },
  delete: {
    path: "/auth.RoleService/Delete",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: Id): Buffer => Buffer.from(Id.encode(value).finish()),
    requestDeserialize: (value: Buffer): Id => Id.decode(value),
    responseSerialize: (value: Status): Buffer => Buffer.from(Status.encode(value).finish()),
    responseDeserialize: (value: Buffer): Status => Status.decode(value),
  },
} as const;

export interface RoleServiceServer extends UntypedServiceImplementation {
  health: handleUnaryCall<Empty, Status>;
  create: handleUnaryCall<CreateRoleInput, RoleData>;
  update: handleUnaryCall<UpdateRoleInput, Status>;
  find: handleUnaryCall<Id, RoleData>;
  list: handleUnaryCall<Id, RoleList>;
  attachPermissions: handleUnaryCall<PermissionsOperations, Status>;
  detachPermissions: handleUnaryCall<PermissionsOperations, Status>;
  delete: handleUnaryCall<Id, Status>;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
}
