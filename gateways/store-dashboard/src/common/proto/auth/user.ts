// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v3.21.12
// source: auth/user.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import type { handleUnaryCall, UntypedServiceImplementation } from "@grpc/grpc-js";
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";
import { Empty } from "../google/protobuf/empty";
import { Id, IdAndStoreInput, Status, TokenRequest } from "./common";

export const protobufPackage = "auth";

export interface User {
  id: string;
  name: string;
  email: string;
  storeId: string;
  roleId: string;
  createdAt: string;
}

export interface UserList {
  users: User[];
}

export interface CreateUserData {
  name: string;
  email: string;
}

export interface CreateUserInput {
  id: string;
  data: CreateUserData | undefined;
  roleId: string;
}

export interface UpdateUserData {
  name?: string | undefined;
}

export interface UpdateUserInput {
  id: string;
  data: UpdateUserData | undefined;
}

export interface ChangePasswordData {
  oldPassword: string;
  newPassword: string;
}

export interface ChangePasswordRequest {
  id: string;
  data: ChangePasswordData | undefined;
}

export interface ChangeEmailRequest {
  id: string;
  email: string;
}

export interface RequestPasswordResetMessage {
  email: string;
}

export interface ResetPasswordMessage {
  token: string;
  password: string;
}

export const AUTH_PACKAGE_NAME = "auth";

function createBaseUser(): User {
  return { id: "", name: "", email: "", storeId: "", roleId: "", createdAt: "" };
}

export const User: MessageFns<User> = {
  encode(message: User, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.email !== "") {
      writer.uint32(26).string(message.email);
    }
    if (message.storeId !== "") {
      writer.uint32(34).string(message.storeId);
    }
    if (message.roleId !== "") {
      writer.uint32(42).string(message.roleId);
    }
    if (message.createdAt !== "") {
      writer.uint32(50).string(message.createdAt);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): User {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUser();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.email = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.storeId = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.roleId = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.createdAt = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseUserList(): UserList {
  return { users: [] };
}

export const UserList: MessageFns<UserList> = {
  encode(message: UserList, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.users) {
      User.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UserList {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUserList();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.users.push(User.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseCreateUserData(): CreateUserData {
  return { name: "", email: "" };
}

export const CreateUserData: MessageFns<CreateUserData> = {
  encode(message: CreateUserData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.email !== "") {
      writer.uint32(18).string(message.email);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateUserData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateUserData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.email = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseCreateUserInput(): CreateUserInput {
  return { id: "", data: undefined, roleId: "" };
}

export const CreateUserInput: MessageFns<CreateUserInput> = {
  encode(message: CreateUserInput, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.data !== undefined) {
      CreateUserData.encode(message.data, writer.uint32(18).fork()).join();
    }
    if (message.roleId !== "") {
      writer.uint32(26).string(message.roleId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateUserInput {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateUserInput();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.data = CreateUserData.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.roleId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseUpdateUserData(): UpdateUserData {
  return {};
}

export const UpdateUserData: MessageFns<UpdateUserData> = {
  encode(message: UpdateUserData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== undefined) {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateUserData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateUserData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseUpdateUserInput(): UpdateUserInput {
  return { id: "", data: undefined };
}

export const UpdateUserInput: MessageFns<UpdateUserInput> = {
  encode(message: UpdateUserInput, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.data !== undefined) {
      UpdateUserData.encode(message.data, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateUserInput {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateUserInput();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.data = UpdateUserData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseChangePasswordData(): ChangePasswordData {
  return { oldPassword: "", newPassword: "" };
}

export const ChangePasswordData: MessageFns<ChangePasswordData> = {
  encode(message: ChangePasswordData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.oldPassword !== "") {
      writer.uint32(10).string(message.oldPassword);
    }
    if (message.newPassword !== "") {
      writer.uint32(18).string(message.newPassword);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ChangePasswordData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseChangePasswordData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.oldPassword = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.newPassword = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseChangePasswordRequest(): ChangePasswordRequest {
  return { id: "", data: undefined };
}

export const ChangePasswordRequest: MessageFns<ChangePasswordRequest> = {
  encode(message: ChangePasswordRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.data !== undefined) {
      ChangePasswordData.encode(message.data, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ChangePasswordRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseChangePasswordRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.data = ChangePasswordData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseChangeEmailRequest(): ChangeEmailRequest {
  return { id: "", email: "" };
}

export const ChangeEmailRequest: MessageFns<ChangeEmailRequest> = {
  encode(message: ChangeEmailRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.email !== "") {
      writer.uint32(18).string(message.email);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ChangeEmailRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseChangeEmailRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.email = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseRequestPasswordResetMessage(): RequestPasswordResetMessage {
  return { email: "" };
}

export const RequestPasswordResetMessage: MessageFns<RequestPasswordResetMessage> = {
  encode(message: RequestPasswordResetMessage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.email !== "") {
      writer.uint32(10).string(message.email);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RequestPasswordResetMessage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRequestPasswordResetMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.email = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseResetPasswordMessage(): ResetPasswordMessage {
  return { token: "", password: "" };
}

export const ResetPasswordMessage: MessageFns<ResetPasswordMessage> = {
  encode(message: ResetPasswordMessage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.token !== "") {
      writer.uint32(10).string(message.token);
    }
    if (message.password !== "") {
      writer.uint32(18).string(message.password);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ResetPasswordMessage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResetPasswordMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.token = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.password = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

export interface UserServiceClient {
  health(request: Empty): Observable<Status>;

  create(request: CreateUserInput): Observable<User>;

  list(request: Id): Observable<UserList>;

  get(request: Id): Observable<User>;

  update(request: UpdateUserInput): Observable<Status>;

  changePassword(request: ChangePasswordRequest): Observable<Status>;

  changeEmail(request: ChangeEmailRequest): Observable<Status>;

  requestPasswordResetToken(request: RequestPasswordResetMessage): Observable<Status>;

  resetPassword(request: ResetPasswordMessage): Observable<Status>;

  requestEmailVerification(request: Id): Observable<Status>;

  verifyEmail(request: TokenRequest): Observable<Status>;

  deactivate(request: IdAndStoreInput): Observable<Status>;
}

export interface UserServiceController {
  health(request: Empty): Promise<Status> | Observable<Status> | Status;

  create(request: CreateUserInput): Promise<User> | Observable<User> | User;

  list(request: Id): Promise<UserList> | Observable<UserList> | UserList;

  get(request: Id): Promise<User> | Observable<User> | User;

  update(request: UpdateUserInput): Promise<Status> | Observable<Status> | Status;

  changePassword(request: ChangePasswordRequest): Promise<Status> | Observable<Status> | Status;

  changeEmail(request: ChangeEmailRequest): Promise<Status> | Observable<Status> | Status;

  requestPasswordResetToken(request: RequestPasswordResetMessage): Promise<Status> | Observable<Status> | Status;

  resetPassword(request: ResetPasswordMessage): Promise<Status> | Observable<Status> | Status;

  requestEmailVerification(request: Id): Promise<Status> | Observable<Status> | Status;

  verifyEmail(request: TokenRequest): Promise<Status> | Observable<Status> | Status;

  deactivate(request: IdAndStoreInput): Promise<Status> | Observable<Status> | Status;
}

export function UserServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = [
      "health",
      "create",
      "list",
      "get",
      "update",
      "changePassword",
      "changeEmail",
      "requestPasswordResetToken",
      "resetPassword",
      "requestEmailVerification",
      "verifyEmail",
      "deactivate",
    ];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("UserService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("UserService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const USER_SERVICE_NAME = "UserService";

export type UserServiceService = typeof UserServiceService;
export const UserServiceService = {
  health: {
    path: "/auth.UserService/Health",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: Empty): Buffer => Buffer.from(Empty.encode(value).finish()),
    requestDeserialize: (value: Buffer): Empty => Empty.decode(value),
    responseSerialize: (value: Status): Buffer => Buffer.from(Status.encode(value).finish()),
    responseDeserialize: (value: Buffer): Status => Status.decode(value),
  },
  create: {
    path: "/auth.UserService/Create",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: CreateUserInput): Buffer => Buffer.from(CreateUserInput.encode(value).finish()),
    requestDeserialize: (value: Buffer): CreateUserInput => CreateUserInput.decode(value),
    responseSerialize: (value: User): Buffer => Buffer.from(User.encode(value).finish()),
    responseDeserialize: (value: Buffer): User => User.decode(value),
  },
  list: {
    path: "/auth.UserService/List",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: Id): Buffer => Buffer.from(Id.encode(value).finish()),
    requestDeserialize: (value: Buffer): Id => Id.decode(value),
    responseSerialize: (value: UserList): Buffer => Buffer.from(UserList.encode(value).finish()),
    responseDeserialize: (value: Buffer): UserList => UserList.decode(value),
  },
  get: {
    path: "/auth.UserService/Get",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: Id): Buffer => Buffer.from(Id.encode(value).finish()),
    requestDeserialize: (value: Buffer): Id => Id.decode(value),
    responseSerialize: (value: User): Buffer => Buffer.from(User.encode(value).finish()),
    responseDeserialize: (value: Buffer): User => User.decode(value),
  },
  update: {
    path: "/auth.UserService/Update",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: UpdateUserInput): Buffer => Buffer.from(UpdateUserInput.encode(value).finish()),
    requestDeserialize: (value: Buffer): UpdateUserInput => UpdateUserInput.decode(value),
    responseSerialize: (value: Status): Buffer => Buffer.from(Status.encode(value).finish()),
    responseDeserialize: (value: Buffer): Status => Status.decode(value),
  },
  changePassword: {
    path: "/auth.UserService/ChangePassword",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: ChangePasswordRequest): Buffer =>
      Buffer.from(ChangePasswordRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): ChangePasswordRequest => ChangePasswordRequest.decode(value),
    responseSerialize: (value: Status): Buffer => Buffer.from(Status.encode(value).finish()),
    responseDeserialize: (value: Buffer): Status => Status.decode(value),
  },
  changeEmail: {
    path: "/auth.UserService/ChangeEmail",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: ChangeEmailRequest): Buffer => Buffer.from(ChangeEmailRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): ChangeEmailRequest => ChangeEmailRequest.decode(value),
    responseSerialize: (value: Status): Buffer => Buffer.from(Status.encode(value).finish()),
    responseDeserialize: (value: Buffer): Status => Status.decode(value),
  },
  requestPasswordResetToken: {
    path: "/auth.UserService/requestPasswordResetToken",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: RequestPasswordResetMessage): Buffer =>
      Buffer.from(RequestPasswordResetMessage.encode(value).finish()),
    requestDeserialize: (value: Buffer): RequestPasswordResetMessage => RequestPasswordResetMessage.decode(value),
    responseSerialize: (value: Status): Buffer => Buffer.from(Status.encode(value).finish()),
    responseDeserialize: (value: Buffer): Status => Status.decode(value),
  },
  resetPassword: {
    path: "/auth.UserService/resetPassword",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: ResetPasswordMessage): Buffer => Buffer.from(ResetPasswordMessage.encode(value).finish()),
    requestDeserialize: (value: Buffer): ResetPasswordMessage => ResetPasswordMessage.decode(value),
    responseSerialize: (value: Status): Buffer => Buffer.from(Status.encode(value).finish()),
    responseDeserialize: (value: Buffer): Status => Status.decode(value),
  },
  requestEmailVerification: {
    path: "/auth.UserService/RequestEmailVerification",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: Id): Buffer => Buffer.from(Id.encode(value).finish()),
    requestDeserialize: (value: Buffer): Id => Id.decode(value),
    responseSerialize: (value: Status): Buffer => Buffer.from(Status.encode(value).finish()),
    responseDeserialize: (value: Buffer): Status => Status.decode(value),
  },
  verifyEmail: {
    path: "/auth.UserService/VerifyEmail",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: TokenRequest): Buffer => Buffer.from(TokenRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): TokenRequest => TokenRequest.decode(value),
    responseSerialize: (value: Status): Buffer => Buffer.from(Status.encode(value).finish()),
    responseDeserialize: (value: Buffer): Status => Status.decode(value),
  },
  deactivate: {
    path: "/auth.UserService/Deactivate",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: IdAndStoreInput): Buffer => Buffer.from(IdAndStoreInput.encode(value).finish()),
    requestDeserialize: (value: Buffer): IdAndStoreInput => IdAndStoreInput.decode(value),
    responseSerialize: (value: Status): Buffer => Buffer.from(Status.encode(value).finish()),
    responseDeserialize: (value: Buffer): Status => Status.decode(value),
  },
} as const;

export interface UserServiceServer extends UntypedServiceImplementation {
  health: handleUnaryCall<Empty, Status>;
  create: handleUnaryCall<CreateUserInput, User>;
  list: handleUnaryCall<Id, UserList>;
  get: handleUnaryCall<Id, User>;
  update: handleUnaryCall<UpdateUserInput, Status>;
  changePassword: handleUnaryCall<ChangePasswordRequest, Status>;
  changeEmail: handleUnaryCall<ChangeEmailRequest, Status>;
  requestPasswordResetToken: handleUnaryCall<RequestPasswordResetMessage, Status>;
  resetPassword: handleUnaryCall<ResetPasswordMessage, Status>;
  requestEmailVerification: handleUnaryCall<Id, Status>;
  verifyEmail: handleUnaryCall<TokenRequest, Status>;
  deactivate: handleUnaryCall<IdAndStoreInput, Status>;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
}
