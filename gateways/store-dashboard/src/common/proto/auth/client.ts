// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v3.21.12
// source: auth/client.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import type { handleUnaryCall, UntypedServiceImplementation } from "@grpc/grpc-js";
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";
import { Empty } from "../google/protobuf/empty";
import { Id, PermissionsOperations, Status } from "./common";

export const protobufPackage = "auth";

export interface ClientInput {
  name: string;
  description: string;
}

export interface CreateClientInput {
  id: string;
  data: ClientInput | undefined;
  permissions: string[];
}

export interface UpdateClientData {
  name?: string | undefined;
  description?: string | undefined;
}

export interface UpdateClientInput {
  id: string;
  storeId: string;
  data?: UpdateClientData | undefined;
}

export interface ClientData {
  id: string;
  storeId: string;
  name: string;
  description: string;
  createdAt: string;
  updatedAt: string;
}

export interface ClientList {
  clients: ClientData[];
}

export interface ClientSecret {
  secret: string;
}

export const AUTH_PACKAGE_NAME = "auth";

function createBaseClientInput(): ClientInput {
  return { name: "", description: "" };
}

export const ClientInput: MessageFns<ClientInput> = {
  encode(message: ClientInput, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.description !== "") {
      writer.uint32(18).string(message.description);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ClientInput {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseClientInput();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.description = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseCreateClientInput(): CreateClientInput {
  return { id: "", data: undefined, permissions: [] };
}

export const CreateClientInput: MessageFns<CreateClientInput> = {
  encode(message: CreateClientInput, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.data !== undefined) {
      ClientInput.encode(message.data, writer.uint32(18).fork()).join();
    }
    for (const v of message.permissions) {
      writer.uint32(26).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateClientInput {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateClientInput();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.data = ClientInput.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.permissions.push(reader.string());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseUpdateClientData(): UpdateClientData {
  return {};
}

export const UpdateClientData: MessageFns<UpdateClientData> = {
  encode(message: UpdateClientData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== undefined) {
      writer.uint32(10).string(message.name);
    }
    if (message.description !== undefined) {
      writer.uint32(18).string(message.description);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateClientData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateClientData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.description = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseUpdateClientInput(): UpdateClientInput {
  return { id: "", storeId: "" };
}

export const UpdateClientInput: MessageFns<UpdateClientInput> = {
  encode(message: UpdateClientInput, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.storeId !== "") {
      writer.uint32(18).string(message.storeId);
    }
    if (message.data !== undefined) {
      UpdateClientData.encode(message.data, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateClientInput {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateClientInput();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.storeId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.data = UpdateClientData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseClientData(): ClientData {
  return { id: "", storeId: "", name: "", description: "", createdAt: "", updatedAt: "" };
}

export const ClientData: MessageFns<ClientData> = {
  encode(message: ClientData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.storeId !== "") {
      writer.uint32(18).string(message.storeId);
    }
    if (message.name !== "") {
      writer.uint32(26).string(message.name);
    }
    if (message.description !== "") {
      writer.uint32(34).string(message.description);
    }
    if (message.createdAt !== "") {
      writer.uint32(42).string(message.createdAt);
    }
    if (message.updatedAt !== "") {
      writer.uint32(50).string(message.updatedAt);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ClientData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseClientData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.storeId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.createdAt = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.updatedAt = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseClientList(): ClientList {
  return { clients: [] };
}

export const ClientList: MessageFns<ClientList> = {
  encode(message: ClientList, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.clients) {
      ClientData.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ClientList {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseClientList();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.clients.push(ClientData.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseClientSecret(): ClientSecret {
  return { secret: "" };
}

export const ClientSecret: MessageFns<ClientSecret> = {
  encode(message: ClientSecret, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.secret !== "") {
      writer.uint32(10).string(message.secret);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ClientSecret {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseClientSecret();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.secret = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

export interface ClientServiceClient {
  health(request: Empty): Observable<Status>;

  create(request: CreateClientInput): Observable<ClientData>;

  update(request: UpdateClientInput): Observable<Status>;

  get(request: Id): Observable<ClientData>;

  list(request: Id): Observable<ClientList>;

  delete(request: Id): Observable<Status>;

  refreshSecret(request: Id): Observable<ClientSecret>;

  attachPermissions(request: PermissionsOperations): Observable<Status>;

  detachPermissions(request: PermissionsOperations): Observable<Status>;
}

export interface ClientServiceController {
  health(request: Empty): Promise<Status> | Observable<Status> | Status;

  create(request: CreateClientInput): Promise<ClientData> | Observable<ClientData> | ClientData;

  update(request: UpdateClientInput): Promise<Status> | Observable<Status> | Status;

  get(request: Id): Promise<ClientData> | Observable<ClientData> | ClientData;

  list(request: Id): Promise<ClientList> | Observable<ClientList> | ClientList;

  delete(request: Id): Promise<Status> | Observable<Status> | Status;

  refreshSecret(request: Id): Promise<ClientSecret> | Observable<ClientSecret> | ClientSecret;

  attachPermissions(request: PermissionsOperations): Promise<Status> | Observable<Status> | Status;

  detachPermissions(request: PermissionsOperations): Promise<Status> | Observable<Status> | Status;
}

export function ClientServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = [
      "health",
      "create",
      "update",
      "get",
      "list",
      "delete",
      "refreshSecret",
      "attachPermissions",
      "detachPermissions",
    ];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("ClientService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("ClientService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const CLIENT_SERVICE_NAME = "ClientService";

export type ClientServiceService = typeof ClientServiceService;
export const ClientServiceService = {
  health: {
    path: "/auth.ClientService/Health",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: Empty): Buffer => Buffer.from(Empty.encode(value).finish()),
    requestDeserialize: (value: Buffer): Empty => Empty.decode(value),
    responseSerialize: (value: Status): Buffer => Buffer.from(Status.encode(value).finish()),
    responseDeserialize: (value: Buffer): Status => Status.decode(value),
  },
  create: {
    path: "/auth.ClientService/Create",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: CreateClientInput): Buffer => Buffer.from(CreateClientInput.encode(value).finish()),
    requestDeserialize: (value: Buffer): CreateClientInput => CreateClientInput.decode(value),
    responseSerialize: (value: ClientData): Buffer => Buffer.from(ClientData.encode(value).finish()),
    responseDeserialize: (value: Buffer): ClientData => ClientData.decode(value),
  },
  update: {
    path: "/auth.ClientService/Update",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: UpdateClientInput): Buffer => Buffer.from(UpdateClientInput.encode(value).finish()),
    requestDeserialize: (value: Buffer): UpdateClientInput => UpdateClientInput.decode(value),
    responseSerialize: (value: Status): Buffer => Buffer.from(Status.encode(value).finish()),
    responseDeserialize: (value: Buffer): Status => Status.decode(value),
  },
  get: {
    path: "/auth.ClientService/Get",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: Id): Buffer => Buffer.from(Id.encode(value).finish()),
    requestDeserialize: (value: Buffer): Id => Id.decode(value),
    responseSerialize: (value: ClientData): Buffer => Buffer.from(ClientData.encode(value).finish()),
    responseDeserialize: (value: Buffer): ClientData => ClientData.decode(value),
  },
  list: {
    path: "/auth.ClientService/List",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: Id): Buffer => Buffer.from(Id.encode(value).finish()),
    requestDeserialize: (value: Buffer): Id => Id.decode(value),
    responseSerialize: (value: ClientList): Buffer => Buffer.from(ClientList.encode(value).finish()),
    responseDeserialize: (value: Buffer): ClientList => ClientList.decode(value),
  },
  delete: {
    path: "/auth.ClientService/Delete",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: Id): Buffer => Buffer.from(Id.encode(value).finish()),
    requestDeserialize: (value: Buffer): Id => Id.decode(value),
    responseSerialize: (value: Status): Buffer => Buffer.from(Status.encode(value).finish()),
    responseDeserialize: (value: Buffer): Status => Status.decode(value),
  },
  refreshSecret: {
    path: "/auth.ClientService/RefreshSecret",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: Id): Buffer => Buffer.from(Id.encode(value).finish()),
    requestDeserialize: (value: Buffer): Id => Id.decode(value),
    responseSerialize: (value: ClientSecret): Buffer => Buffer.from(ClientSecret.encode(value).finish()),
    responseDeserialize: (value: Buffer): ClientSecret => ClientSecret.decode(value),
  },
  attachPermissions: {
    path: "/auth.ClientService/AttachPermissions",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: PermissionsOperations): Buffer =>
      Buffer.from(PermissionsOperations.encode(value).finish()),
    requestDeserialize: (value: Buffer): PermissionsOperations => PermissionsOperations.decode(value),
    responseSerialize: (value: Status): Buffer => Buffer.from(Status.encode(value).finish()),
    responseDeserialize: (value: Buffer): Status => Status.decode(value),
  },
  detachPermissions: {
    path: "/auth.ClientService/DetachPermissions",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: PermissionsOperations): Buffer =>
      Buffer.from(PermissionsOperations.encode(value).finish()),
    requestDeserialize: (value: Buffer): PermissionsOperations => PermissionsOperations.decode(value),
    responseSerialize: (value: Status): Buffer => Buffer.from(Status.encode(value).finish()),
    responseDeserialize: (value: Buffer): Status => Status.decode(value),
  },
} as const;

export interface ClientServiceServer extends UntypedServiceImplementation {
  health: handleUnaryCall<Empty, Status>;
  create: handleUnaryCall<CreateClientInput, ClientData>;
  update: handleUnaryCall<UpdateClientInput, Status>;
  get: handleUnaryCall<Id, ClientData>;
  list: handleUnaryCall<Id, ClientList>;
  delete: handleUnaryCall<Id, Status>;
  refreshSecret: handleUnaryCall<Id, ClientSecret>;
  attachPermissions: handleUnaryCall<PermissionsOperations, Status>;
  detachPermissions: handleUnaryCall<PermissionsOperations, Status>;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
}
