// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v3.21.12
// source: auth/permission.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import type { handleUnaryCall, UntypedServiceImplementation } from "@grpc/grpc-js";
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";
import { Empty } from "../google/protobuf/empty";
import { Id, Status } from "./common";

export const protobufPackage = "auth";

export interface CreatePermissionInput {
  name: string;
  description: string;
}

export interface UpdatePermissionData {
  name?: string | undefined;
  description?: string | undefined;
}

export interface UpdatePermissionInput {
  id: string;
  data?: UpdatePermissionData | undefined;
}

export interface PermissionData {
  id: string;
  name: string;
  description: string;
  createdAt: string;
}

export interface PermissionList {
  permissions: PermissionData[];
}

export const AUTH_PACKAGE_NAME = "auth";

function createBaseCreatePermissionInput(): CreatePermissionInput {
  return { name: "", description: "" };
}

export const CreatePermissionInput: MessageFns<CreatePermissionInput> = {
  encode(message: CreatePermissionInput, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.description !== "") {
      writer.uint32(18).string(message.description);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreatePermissionInput {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreatePermissionInput();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.description = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseUpdatePermissionData(): UpdatePermissionData {
  return {};
}

export const UpdatePermissionData: MessageFns<UpdatePermissionData> = {
  encode(message: UpdatePermissionData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== undefined) {
      writer.uint32(10).string(message.name);
    }
    if (message.description !== undefined) {
      writer.uint32(18).string(message.description);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdatePermissionData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdatePermissionData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.description = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseUpdatePermissionInput(): UpdatePermissionInput {
  return { id: "" };
}

export const UpdatePermissionInput: MessageFns<UpdatePermissionInput> = {
  encode(message: UpdatePermissionInput, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.data !== undefined) {
      UpdatePermissionData.encode(message.data, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdatePermissionInput {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdatePermissionInput();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.data = UpdatePermissionData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBasePermissionData(): PermissionData {
  return { id: "", name: "", description: "", createdAt: "" };
}

export const PermissionData: MessageFns<PermissionData> = {
  encode(message: PermissionData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.description !== "") {
      writer.uint32(26).string(message.description);
    }
    if (message.createdAt !== "") {
      writer.uint32(34).string(message.createdAt);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PermissionData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePermissionData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.createdAt = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBasePermissionList(): PermissionList {
  return { permissions: [] };
}

export const PermissionList: MessageFns<PermissionList> = {
  encode(message: PermissionList, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.permissions) {
      PermissionData.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PermissionList {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePermissionList();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.permissions.push(PermissionData.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

export interface PermissionServiceClient {
  health(request: Empty): Observable<Status>;

  create(request: CreatePermissionInput): Observable<PermissionData>;

  update(request: UpdatePermissionInput): Observable<Status>;

  get(request: Id): Observable<PermissionData>;

  list(request: Empty): Observable<PermissionList>;

  listRolePermissions(request: Id): Observable<PermissionList>;

  delete(request: Id): Observable<Status>;
}

export interface PermissionServiceController {
  health(request: Empty): Promise<Status> | Observable<Status> | Status;

  create(request: CreatePermissionInput): Promise<PermissionData> | Observable<PermissionData> | PermissionData;

  update(request: UpdatePermissionInput): Promise<Status> | Observable<Status> | Status;

  get(request: Id): Promise<PermissionData> | Observable<PermissionData> | PermissionData;

  list(request: Empty): Promise<PermissionList> | Observable<PermissionList> | PermissionList;

  listRolePermissions(request: Id): Promise<PermissionList> | Observable<PermissionList> | PermissionList;

  delete(request: Id): Promise<Status> | Observable<Status> | Status;
}

export function PermissionServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["health", "create", "update", "get", "list", "listRolePermissions", "delete"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("PermissionService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("PermissionService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const PERMISSION_SERVICE_NAME = "PermissionService";

export type PermissionServiceService = typeof PermissionServiceService;
export const PermissionServiceService = {
  health: {
    path: "/auth.PermissionService/Health",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: Empty): Buffer => Buffer.from(Empty.encode(value).finish()),
    requestDeserialize: (value: Buffer): Empty => Empty.decode(value),
    responseSerialize: (value: Status): Buffer => Buffer.from(Status.encode(value).finish()),
    responseDeserialize: (value: Buffer): Status => Status.decode(value),
  },
  create: {
    path: "/auth.PermissionService/Create",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: CreatePermissionInput): Buffer =>
      Buffer.from(CreatePermissionInput.encode(value).finish()),
    requestDeserialize: (value: Buffer): CreatePermissionInput => CreatePermissionInput.decode(value),
    responseSerialize: (value: PermissionData): Buffer => Buffer.from(PermissionData.encode(value).finish()),
    responseDeserialize: (value: Buffer): PermissionData => PermissionData.decode(value),
  },
  update: {
    path: "/auth.PermissionService/Update",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: UpdatePermissionInput): Buffer =>
      Buffer.from(UpdatePermissionInput.encode(value).finish()),
    requestDeserialize: (value: Buffer): UpdatePermissionInput => UpdatePermissionInput.decode(value),
    responseSerialize: (value: Status): Buffer => Buffer.from(Status.encode(value).finish()),
    responseDeserialize: (value: Buffer): Status => Status.decode(value),
  },
  get: {
    path: "/auth.PermissionService/Get",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: Id): Buffer => Buffer.from(Id.encode(value).finish()),
    requestDeserialize: (value: Buffer): Id => Id.decode(value),
    responseSerialize: (value: PermissionData): Buffer => Buffer.from(PermissionData.encode(value).finish()),
    responseDeserialize: (value: Buffer): PermissionData => PermissionData.decode(value),
  },
  list: {
    path: "/auth.PermissionService/List",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: Empty): Buffer => Buffer.from(Empty.encode(value).finish()),
    requestDeserialize: (value: Buffer): Empty => Empty.decode(value),
    responseSerialize: (value: PermissionList): Buffer => Buffer.from(PermissionList.encode(value).finish()),
    responseDeserialize: (value: Buffer): PermissionList => PermissionList.decode(value),
  },
  listRolePermissions: {
    path: "/auth.PermissionService/ListRolePermissions",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: Id): Buffer => Buffer.from(Id.encode(value).finish()),
    requestDeserialize: (value: Buffer): Id => Id.decode(value),
    responseSerialize: (value: PermissionList): Buffer => Buffer.from(PermissionList.encode(value).finish()),
    responseDeserialize: (value: Buffer): PermissionList => PermissionList.decode(value),
  },
  delete: {
    path: "/auth.PermissionService/Delete",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: Id): Buffer => Buffer.from(Id.encode(value).finish()),
    requestDeserialize: (value: Buffer): Id => Id.decode(value),
    responseSerialize: (value: Status): Buffer => Buffer.from(Status.encode(value).finish()),
    responseDeserialize: (value: Buffer): Status => Status.decode(value),
  },
} as const;

export interface PermissionServiceServer extends UntypedServiceImplementation {
  health: handleUnaryCall<Empty, Status>;
  create: handleUnaryCall<CreatePermissionInput, PermissionData>;
  update: handleUnaryCall<UpdatePermissionInput, Status>;
  get: handleUnaryCall<Id, PermissionData>;
  list: handleUnaryCall<Empty, PermissionList>;
  listRolePermissions: handleUnaryCall<Id, PermissionList>;
  delete: handleUnaryCall<Id, Status>;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
}
