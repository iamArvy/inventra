// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v3.21.12
// source: product/category.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import type { handleUnaryCall, UntypedServiceImplementation } from "@grpc/grpc-js";
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";
import { Id, Name, Status } from "./common";

export const protobufPackage = "product";

export interface CategoryInput {
  name: string;
  description: string;
}

export interface PartialCategoryInput {
  name?: string | undefined;
  description?: string | undefined;
}

export interface CreateCategoryInput {
  storeId: string;
  data: CategoryInput | undefined;
}

export interface UpdateCategoryInput {
  id: string;
  data: PartialCategoryInput | undefined;
}

export interface CategoryOrderBy {
  /** Sort by key */
  name?:
    | string
    | undefined;
  /** Sort by value */
  createdAt?:
    | string
    | undefined;
  /** Sort by value */
  updatedAt?: string | undefined;
}

export interface ListCategoryInput {
  orderBy?:
    | CategoryOrderBy
    | undefined;
  /** Number of items to skip for pagination */
  skip?: number | undefined;
  take?: number | undefined;
}

export interface ListCategoryByRelationInput {
  id: string;
  params?: ListCategoryInput | undefined;
}

export interface Category {
  id: string;
  name: string;
  description: string;
  storeId: string;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
}

export interface CategoryList {
  categories: Category[];
}

export const PRODUCT_PACKAGE_NAME = "product";

function createBaseCategoryInput(): CategoryInput {
  return { name: "", description: "" };
}

export const CategoryInput: MessageFns<CategoryInput> = {
  encode(message: CategoryInput, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.description !== "") {
      writer.uint32(18).string(message.description);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CategoryInput {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCategoryInput();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.description = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBasePartialCategoryInput(): PartialCategoryInput {
  return {};
}

export const PartialCategoryInput: MessageFns<PartialCategoryInput> = {
  encode(message: PartialCategoryInput, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== undefined) {
      writer.uint32(10).string(message.name);
    }
    if (message.description !== undefined) {
      writer.uint32(18).string(message.description);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PartialCategoryInput {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePartialCategoryInput();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.description = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseCreateCategoryInput(): CreateCategoryInput {
  return { storeId: "", data: undefined };
}

export const CreateCategoryInput: MessageFns<CreateCategoryInput> = {
  encode(message: CreateCategoryInput, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.storeId !== "") {
      writer.uint32(10).string(message.storeId);
    }
    if (message.data !== undefined) {
      CategoryInput.encode(message.data, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateCategoryInput {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateCategoryInput();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.storeId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.data = CategoryInput.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseUpdateCategoryInput(): UpdateCategoryInput {
  return { id: "", data: undefined };
}

export const UpdateCategoryInput: MessageFns<UpdateCategoryInput> = {
  encode(message: UpdateCategoryInput, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.data !== undefined) {
      PartialCategoryInput.encode(message.data, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateCategoryInput {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateCategoryInput();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.data = PartialCategoryInput.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseCategoryOrderBy(): CategoryOrderBy {
  return {};
}

export const CategoryOrderBy: MessageFns<CategoryOrderBy> = {
  encode(message: CategoryOrderBy, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== undefined) {
      writer.uint32(10).string(message.name);
    }
    if (message.createdAt !== undefined) {
      writer.uint32(18).string(message.createdAt);
    }
    if (message.updatedAt !== undefined) {
      writer.uint32(26).string(message.updatedAt);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CategoryOrderBy {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCategoryOrderBy();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.createdAt = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.updatedAt = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseListCategoryInput(): ListCategoryInput {
  return {};
}

export const ListCategoryInput: MessageFns<ListCategoryInput> = {
  encode(message: ListCategoryInput, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.orderBy !== undefined) {
      CategoryOrderBy.encode(message.orderBy, writer.uint32(10).fork()).join();
    }
    if (message.skip !== undefined) {
      writer.uint32(16).int32(message.skip);
    }
    if (message.take !== undefined) {
      writer.uint32(24).int32(message.take);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListCategoryInput {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListCategoryInput();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.orderBy = CategoryOrderBy.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.skip = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.take = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseListCategoryByRelationInput(): ListCategoryByRelationInput {
  return { id: "" };
}

export const ListCategoryByRelationInput: MessageFns<ListCategoryByRelationInput> = {
  encode(message: ListCategoryByRelationInput, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.params !== undefined) {
      ListCategoryInput.encode(message.params, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListCategoryByRelationInput {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListCategoryByRelationInput();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.params = ListCategoryInput.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseCategory(): Category {
  return { id: "", name: "", description: "", storeId: "" };
}

export const Category: MessageFns<Category> = {
  encode(message: Category, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.description !== "") {
      writer.uint32(26).string(message.description);
    }
    if (message.storeId !== "") {
      writer.uint32(34).string(message.storeId);
    }
    if (message.createdAt !== undefined) {
      writer.uint32(42).string(message.createdAt);
    }
    if (message.updatedAt !== undefined) {
      writer.uint32(50).string(message.updatedAt);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Category {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCategory();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.storeId = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.createdAt = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.updatedAt = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseCategoryList(): CategoryList {
  return { categories: [] };
}

export const CategoryList: MessageFns<CategoryList> = {
  encode(message: CategoryList, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.categories) {
      Category.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CategoryList {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCategoryList();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.categories.push(Category.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

export interface CategoryServiceClient {
  create(request: CreateCategoryInput): Observable<Category>;

  getById(request: Id): Observable<Category>;

  getByName(request: Name): Observable<Category>;

  list(request: ListCategoryInput): Observable<CategoryList>;

  listStoreCategories(request: ListCategoryByRelationInput): Observable<CategoryList>;

  update(request: UpdateCategoryInput): Observable<Category>;

  delete(request: Id): Observable<Status>;
}

export interface CategoryServiceController {
  create(request: CreateCategoryInput): Promise<Category> | Observable<Category> | Category;

  getById(request: Id): Promise<Category> | Observable<Category> | Category;

  getByName(request: Name): Promise<Category> | Observable<Category> | Category;

  list(request: ListCategoryInput): Promise<CategoryList> | Observable<CategoryList> | CategoryList;

  listStoreCategories(
    request: ListCategoryByRelationInput,
  ): Promise<CategoryList> | Observable<CategoryList> | CategoryList;

  update(request: UpdateCategoryInput): Promise<Category> | Observable<Category> | Category;

  delete(request: Id): Promise<Status> | Observable<Status> | Status;
}

export function CategoryServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["create", "getById", "getByName", "list", "listStoreCategories", "update", "delete"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("CategoryService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("CategoryService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const CATEGORY_SERVICE_NAME = "CategoryService";

export type CategoryServiceService = typeof CategoryServiceService;
export const CategoryServiceService = {
  create: {
    path: "/product.CategoryService/Create",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: CreateCategoryInput): Buffer => Buffer.from(CreateCategoryInput.encode(value).finish()),
    requestDeserialize: (value: Buffer): CreateCategoryInput => CreateCategoryInput.decode(value),
    responseSerialize: (value: Category): Buffer => Buffer.from(Category.encode(value).finish()),
    responseDeserialize: (value: Buffer): Category => Category.decode(value),
  },
  getById: {
    path: "/product.CategoryService/GetById",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: Id): Buffer => Buffer.from(Id.encode(value).finish()),
    requestDeserialize: (value: Buffer): Id => Id.decode(value),
    responseSerialize: (value: Category): Buffer => Buffer.from(Category.encode(value).finish()),
    responseDeserialize: (value: Buffer): Category => Category.decode(value),
  },
  getByName: {
    path: "/product.CategoryService/GetByName",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: Name): Buffer => Buffer.from(Name.encode(value).finish()),
    requestDeserialize: (value: Buffer): Name => Name.decode(value),
    responseSerialize: (value: Category): Buffer => Buffer.from(Category.encode(value).finish()),
    responseDeserialize: (value: Buffer): Category => Category.decode(value),
  },
  list: {
    path: "/product.CategoryService/List",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: ListCategoryInput): Buffer => Buffer.from(ListCategoryInput.encode(value).finish()),
    requestDeserialize: (value: Buffer): ListCategoryInput => ListCategoryInput.decode(value),
    responseSerialize: (value: CategoryList): Buffer => Buffer.from(CategoryList.encode(value).finish()),
    responseDeserialize: (value: Buffer): CategoryList => CategoryList.decode(value),
  },
  listStoreCategories: {
    path: "/product.CategoryService/ListStoreCategories",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: ListCategoryByRelationInput): Buffer =>
      Buffer.from(ListCategoryByRelationInput.encode(value).finish()),
    requestDeserialize: (value: Buffer): ListCategoryByRelationInput => ListCategoryByRelationInput.decode(value),
    responseSerialize: (value: CategoryList): Buffer => Buffer.from(CategoryList.encode(value).finish()),
    responseDeserialize: (value: Buffer): CategoryList => CategoryList.decode(value),
  },
  update: {
    path: "/product.CategoryService/Update",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: UpdateCategoryInput): Buffer => Buffer.from(UpdateCategoryInput.encode(value).finish()),
    requestDeserialize: (value: Buffer): UpdateCategoryInput => UpdateCategoryInput.decode(value),
    responseSerialize: (value: Category): Buffer => Buffer.from(Category.encode(value).finish()),
    responseDeserialize: (value: Buffer): Category => Category.decode(value),
  },
  delete: {
    path: "/product.CategoryService/Delete",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: Id): Buffer => Buffer.from(Id.encode(value).finish()),
    requestDeserialize: (value: Buffer): Id => Id.decode(value),
    responseSerialize: (value: Status): Buffer => Buffer.from(Status.encode(value).finish()),
    responseDeserialize: (value: Buffer): Status => Status.decode(value),
  },
} as const;

export interface CategoryServiceServer extends UntypedServiceImplementation {
  create: handleUnaryCall<CreateCategoryInput, Category>;
  getById: handleUnaryCall<Id, Category>;
  getByName: handleUnaryCall<Name, Category>;
  list: handleUnaryCall<ListCategoryInput, CategoryList>;
  listStoreCategories: handleUnaryCall<ListCategoryByRelationInput, CategoryList>;
  update: handleUnaryCall<UpdateCategoryInput, Category>;
  delete: handleUnaryCall<Id, Status>;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
}
