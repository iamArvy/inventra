// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v3.21.12
// source: product/product.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import type { handleUnaryCall, UntypedServiceImplementation } from "@grpc/grpc-js";
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";
import { Value } from "../google/protobuf/struct";
import { Timestamp } from "../google/protobuf/timestamp";
import { Id, Status } from "./common";

export const protobufPackage = "product";

export interface ProductInput {
  name: string;
  description?: string | undefined;
  image?: string | undefined;
  categoryId: string;
  sku: string;
  price: number;
  stock: number;
  attributes: { [key: string]: any | undefined };
  tags: string[];
}

export interface ProductInput_AttributesEntry {
  key: string;
  value: any | undefined;
}

export interface PartialProductInput {
  name?: string | undefined;
  description?: string | undefined;
  image?: string | undefined;
  categoryId?: string | undefined;
  sku?: string | undefined;
  price?: number | undefined;
  attributes: { [key: string]: any | undefined };
  tags: string[];
}

export interface PartialProductInput_AttributesEntry {
  key: string;
  value: any | undefined;
}

export interface CreateProductInput {
  storeId: string;
  data: ProductInput | undefined;
}

export interface UpdateProductInput {
  id: string;
  data: PartialProductInput | undefined;
}

export interface ProductCategory {
  id: string;
  name: string;
}

export interface Product {
  id: string;
  name: string;
  description?: string | undefined;
  image?: string | undefined;
  storeId: string;
  categoryId: string;
  sku: string;
  price: number;
  stock: number;
  attributes: { [key: string]: any | undefined };
  tags: string[];
  category: ProductCategory | undefined;
  createdAt: Timestamp | undefined;
  deletedAt: Timestamp | undefined;
}

export interface Product_AttributesEntry {
  key: string;
  value: any | undefined;
}

export interface ProductList {
  products: Product[];
}

export interface ProductOrderBy {
  /** Sort by key */
  name?:
    | string
    | undefined;
  /** Sort by value */
  createdAt?:
    | string
    | undefined;
  /** Sort by value */
  updatedAt?: string | undefined;
}

export interface ListProductInput {
  orderBy?:
    | ProductOrderBy
    | undefined;
  /** Number of items to skip for pagination */
  skip?: number | undefined;
  take?: number | undefined;
}

export interface ListProductByRelationInput {
  id: string;
  params?: ListProductInput | undefined;
}

export const PRODUCT_PACKAGE_NAME = "product";

function createBaseProductInput(): ProductInput {
  return { name: "", categoryId: "", sku: "", price: 0, stock: 0, attributes: {}, tags: [] };
}

export const ProductInput: MessageFns<ProductInput> = {
  encode(message: ProductInput, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.description !== undefined) {
      writer.uint32(18).string(message.description);
    }
    if (message.image !== undefined) {
      writer.uint32(26).string(message.image);
    }
    if (message.categoryId !== "") {
      writer.uint32(34).string(message.categoryId);
    }
    if (message.sku !== "") {
      writer.uint32(42).string(message.sku);
    }
    if (message.price !== 0) {
      writer.uint32(48).int32(message.price);
    }
    if (message.stock !== 0) {
      writer.uint32(56).int32(message.stock);
    }
    Object.entries(message.attributes).forEach(([key, value]) => {
      if (value !== undefined) {
        ProductInput_AttributesEntry.encode({ key: key as any, value }, writer.uint32(66).fork()).join();
      }
    });
    for (const v of message.tags) {
      writer.uint32(74).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ProductInput {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProductInput();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.image = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.categoryId = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.sku = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.price = reader.int32();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.stock = reader.int32();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          const entry8 = ProductInput_AttributesEntry.decode(reader, reader.uint32());
          if (entry8.value !== undefined) {
            message.attributes[entry8.key] = entry8.value;
          }
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.tags.push(reader.string());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseProductInput_AttributesEntry(): ProductInput_AttributesEntry {
  return { key: "", value: undefined };
}

export const ProductInput_AttributesEntry: MessageFns<ProductInput_AttributesEntry> = {
  encode(message: ProductInput_AttributesEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== undefined) {
      Value.encode(Value.wrap(message.value), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ProductInput_AttributesEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProductInput_AttributesEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = Value.unwrap(Value.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBasePartialProductInput(): PartialProductInput {
  return { attributes: {}, tags: [] };
}

export const PartialProductInput: MessageFns<PartialProductInput> = {
  encode(message: PartialProductInput, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== undefined) {
      writer.uint32(10).string(message.name);
    }
    if (message.description !== undefined) {
      writer.uint32(18).string(message.description);
    }
    if (message.image !== undefined) {
      writer.uint32(26).string(message.image);
    }
    if (message.categoryId !== undefined) {
      writer.uint32(34).string(message.categoryId);
    }
    if (message.sku !== undefined) {
      writer.uint32(42).string(message.sku);
    }
    if (message.price !== undefined) {
      writer.uint32(48).int32(message.price);
    }
    Object.entries(message.attributes).forEach(([key, value]) => {
      if (value !== undefined) {
        PartialProductInput_AttributesEntry.encode({ key: key as any, value }, writer.uint32(58).fork()).join();
      }
    });
    for (const v of message.tags) {
      writer.uint32(66).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PartialProductInput {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePartialProductInput();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.image = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.categoryId = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.sku = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.price = reader.int32();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          const entry7 = PartialProductInput_AttributesEntry.decode(reader, reader.uint32());
          if (entry7.value !== undefined) {
            message.attributes[entry7.key] = entry7.value;
          }
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.tags.push(reader.string());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBasePartialProductInput_AttributesEntry(): PartialProductInput_AttributesEntry {
  return { key: "", value: undefined };
}

export const PartialProductInput_AttributesEntry: MessageFns<PartialProductInput_AttributesEntry> = {
  encode(message: PartialProductInput_AttributesEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== undefined) {
      Value.encode(Value.wrap(message.value), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PartialProductInput_AttributesEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePartialProductInput_AttributesEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = Value.unwrap(Value.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseCreateProductInput(): CreateProductInput {
  return { storeId: "", data: undefined };
}

export const CreateProductInput: MessageFns<CreateProductInput> = {
  encode(message: CreateProductInput, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.storeId !== "") {
      writer.uint32(10).string(message.storeId);
    }
    if (message.data !== undefined) {
      ProductInput.encode(message.data, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateProductInput {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateProductInput();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.storeId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.data = ProductInput.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseUpdateProductInput(): UpdateProductInput {
  return { id: "", data: undefined };
}

export const UpdateProductInput: MessageFns<UpdateProductInput> = {
  encode(message: UpdateProductInput, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.data !== undefined) {
      PartialProductInput.encode(message.data, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateProductInput {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateProductInput();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.data = PartialProductInput.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseProductCategory(): ProductCategory {
  return { id: "", name: "" };
}

export const ProductCategory: MessageFns<ProductCategory> = {
  encode(message: ProductCategory, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ProductCategory {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProductCategory();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseProduct(): Product {
  return {
    id: "",
    name: "",
    storeId: "",
    categoryId: "",
    sku: "",
    price: 0,
    stock: 0,
    attributes: {},
    tags: [],
    category: undefined,
    createdAt: undefined,
    deletedAt: undefined,
  };
}

export const Product: MessageFns<Product> = {
  encode(message: Product, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.description !== undefined) {
      writer.uint32(26).string(message.description);
    }
    if (message.image !== undefined) {
      writer.uint32(34).string(message.image);
    }
    if (message.storeId !== "") {
      writer.uint32(42).string(message.storeId);
    }
    if (message.categoryId !== "") {
      writer.uint32(50).string(message.categoryId);
    }
    if (message.sku !== "") {
      writer.uint32(58).string(message.sku);
    }
    if (message.price !== 0) {
      writer.uint32(64).int32(message.price);
    }
    if (message.stock !== 0) {
      writer.uint32(72).int32(message.stock);
    }
    Object.entries(message.attributes).forEach(([key, value]) => {
      if (value !== undefined) {
        Product_AttributesEntry.encode({ key: key as any, value }, writer.uint32(82).fork()).join();
      }
    });
    for (const v of message.tags) {
      writer.uint32(90).string(v!);
    }
    if (message.category !== undefined) {
      ProductCategory.encode(message.category, writer.uint32(98).fork()).join();
    }
    if (message.createdAt !== undefined) {
      Timestamp.encode(message.createdAt, writer.uint32(106).fork()).join();
    }
    if (message.deletedAt !== undefined) {
      Timestamp.encode(message.deletedAt, writer.uint32(114).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Product {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProduct();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.image = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.storeId = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.categoryId = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.sku = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.price = reader.int32();
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.stock = reader.int32();
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          const entry10 = Product_AttributesEntry.decode(reader, reader.uint32());
          if (entry10.value !== undefined) {
            message.attributes[entry10.key] = entry10.value;
          }
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.tags.push(reader.string());
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.category = ProductCategory.decode(reader, reader.uint32());
          continue;
        }
        case 13: {
          if (tag !== 106) {
            break;
          }

          message.createdAt = Timestamp.decode(reader, reader.uint32());
          continue;
        }
        case 14: {
          if (tag !== 114) {
            break;
          }

          message.deletedAt = Timestamp.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseProduct_AttributesEntry(): Product_AttributesEntry {
  return { key: "", value: undefined };
}

export const Product_AttributesEntry: MessageFns<Product_AttributesEntry> = {
  encode(message: Product_AttributesEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== undefined) {
      Value.encode(Value.wrap(message.value), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Product_AttributesEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProduct_AttributesEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = Value.unwrap(Value.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseProductList(): ProductList {
  return { products: [] };
}

export const ProductList: MessageFns<ProductList> = {
  encode(message: ProductList, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.products) {
      Product.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ProductList {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProductList();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.products.push(Product.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseProductOrderBy(): ProductOrderBy {
  return {};
}

export const ProductOrderBy: MessageFns<ProductOrderBy> = {
  encode(message: ProductOrderBy, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== undefined) {
      writer.uint32(10).string(message.name);
    }
    if (message.createdAt !== undefined) {
      writer.uint32(18).string(message.createdAt);
    }
    if (message.updatedAt !== undefined) {
      writer.uint32(26).string(message.updatedAt);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ProductOrderBy {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProductOrderBy();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.createdAt = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.updatedAt = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseListProductInput(): ListProductInput {
  return {};
}

export const ListProductInput: MessageFns<ListProductInput> = {
  encode(message: ListProductInput, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.orderBy !== undefined) {
      ProductOrderBy.encode(message.orderBy, writer.uint32(10).fork()).join();
    }
    if (message.skip !== undefined) {
      writer.uint32(16).int32(message.skip);
    }
    if (message.take !== undefined) {
      writer.uint32(24).int32(message.take);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListProductInput {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListProductInput();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.orderBy = ProductOrderBy.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.skip = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.take = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseListProductByRelationInput(): ListProductByRelationInput {
  return { id: "" };
}

export const ListProductByRelationInput: MessageFns<ListProductByRelationInput> = {
  encode(message: ListProductByRelationInput, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.params !== undefined) {
      ListProductInput.encode(message.params, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListProductByRelationInput {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListProductByRelationInput();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.params = ListProductInput.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

export interface ProductServiceClient {
  create(request: CreateProductInput): Observable<Product>;

  get(request: Id): Observable<Product>;

  listStoreProducts(request: ListProductByRelationInput): Observable<ProductList>;

  listCategoryProducts(request: ListProductByRelationInput): Observable<ProductList>;

  list(request: ListProductInput): Observable<ProductList>;

  update(request: UpdateProductInput): Observable<Status>;

  delete(request: Id): Observable<Status>;
}

export interface ProductServiceController {
  create(request: CreateProductInput): Promise<Product> | Observable<Product> | Product;

  get(request: Id): Promise<Product> | Observable<Product> | Product;

  listStoreProducts(request: ListProductByRelationInput): Promise<ProductList> | Observable<ProductList> | ProductList;

  listCategoryProducts(
    request: ListProductByRelationInput,
  ): Promise<ProductList> | Observable<ProductList> | ProductList;

  list(request: ListProductInput): Promise<ProductList> | Observable<ProductList> | ProductList;

  update(request: UpdateProductInput): Promise<Status> | Observable<Status> | Status;

  delete(request: Id): Promise<Status> | Observable<Status> | Status;
}

export function ProductServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = [
      "create",
      "get",
      "listStoreProducts",
      "listCategoryProducts",
      "list",
      "update",
      "delete",
    ];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("ProductService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("ProductService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const PRODUCT_SERVICE_NAME = "ProductService";

export type ProductServiceService = typeof ProductServiceService;
export const ProductServiceService = {
  create: {
    path: "/product.ProductService/Create",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: CreateProductInput): Buffer => Buffer.from(CreateProductInput.encode(value).finish()),
    requestDeserialize: (value: Buffer): CreateProductInput => CreateProductInput.decode(value),
    responseSerialize: (value: Product): Buffer => Buffer.from(Product.encode(value).finish()),
    responseDeserialize: (value: Buffer): Product => Product.decode(value),
  },
  get: {
    path: "/product.ProductService/Get",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: Id): Buffer => Buffer.from(Id.encode(value).finish()),
    requestDeserialize: (value: Buffer): Id => Id.decode(value),
    responseSerialize: (value: Product): Buffer => Buffer.from(Product.encode(value).finish()),
    responseDeserialize: (value: Buffer): Product => Product.decode(value),
  },
  listStoreProducts: {
    path: "/product.ProductService/ListStoreProducts",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: ListProductByRelationInput): Buffer =>
      Buffer.from(ListProductByRelationInput.encode(value).finish()),
    requestDeserialize: (value: Buffer): ListProductByRelationInput => ListProductByRelationInput.decode(value),
    responseSerialize: (value: ProductList): Buffer => Buffer.from(ProductList.encode(value).finish()),
    responseDeserialize: (value: Buffer): ProductList => ProductList.decode(value),
  },
  listCategoryProducts: {
    path: "/product.ProductService/ListCategoryProducts",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: ListProductByRelationInput): Buffer =>
      Buffer.from(ListProductByRelationInput.encode(value).finish()),
    requestDeserialize: (value: Buffer): ListProductByRelationInput => ListProductByRelationInput.decode(value),
    responseSerialize: (value: ProductList): Buffer => Buffer.from(ProductList.encode(value).finish()),
    responseDeserialize: (value: Buffer): ProductList => ProductList.decode(value),
  },
  list: {
    path: "/product.ProductService/List",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: ListProductInput): Buffer => Buffer.from(ListProductInput.encode(value).finish()),
    requestDeserialize: (value: Buffer): ListProductInput => ListProductInput.decode(value),
    responseSerialize: (value: ProductList): Buffer => Buffer.from(ProductList.encode(value).finish()),
    responseDeserialize: (value: Buffer): ProductList => ProductList.decode(value),
  },
  update: {
    path: "/product.ProductService/Update",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: UpdateProductInput): Buffer => Buffer.from(UpdateProductInput.encode(value).finish()),
    requestDeserialize: (value: Buffer): UpdateProductInput => UpdateProductInput.decode(value),
    responseSerialize: (value: Status): Buffer => Buffer.from(Status.encode(value).finish()),
    responseDeserialize: (value: Buffer): Status => Status.decode(value),
  },
  delete: {
    path: "/product.ProductService/Delete",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: Id): Buffer => Buffer.from(Id.encode(value).finish()),
    requestDeserialize: (value: Buffer): Id => Id.decode(value),
    responseSerialize: (value: Status): Buffer => Buffer.from(Status.encode(value).finish()),
    responseDeserialize: (value: Buffer): Status => Status.decode(value),
  },
} as const;

export interface ProductServiceServer extends UntypedServiceImplementation {
  create: handleUnaryCall<CreateProductInput, Product>;
  get: handleUnaryCall<Id, Product>;
  listStoreProducts: handleUnaryCall<ListProductByRelationInput, ProductList>;
  listCategoryProducts: handleUnaryCall<ListProductByRelationInput, ProductList>;
  list: handleUnaryCall<ListProductInput, ProductList>;
  update: handleUnaryCall<UpdateProductInput, Status>;
  delete: handleUnaryCall<Id, Status>;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
}
