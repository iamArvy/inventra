// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  passwordHash  String
  emailVerified Boolean   @default(false)
  storeId       String
  roleId        String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  role          Role      @relation(fields: [roleId], references: [id])
  sessions      Session[]
}

model Role {
  id              String            @id @default(cuid())
  name            String
  storeId         String
  description     String?
  permissions     String[]
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  Users           User[]
  RolePermissions RolePermissions[]

  @@unique([name, storeId])
}

model Permission {
  id                String              @id @default(cuid())
  name              String              @unique
  description       String?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  RolePermissions   RolePermissions[]
  ClientPermissions ClientPermissions[]
}

model RolePermissions {
  id           String     @id @default(cuid())
  permissionId String
  roleId       String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  permission   Permission @relation(fields: [permissionId], references: [id])
  role         Role       @relation(fields: [roleId], references: [id])

  @@unique([permissionId, roleId])
}

model Session {
  id                 String    @id @default(cuid())
  userId             String
  userAgent          String
  ipAddress          String
  hashedRefreshToken String?
  expiresAt          DateTime
  revokedAt          DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id])
}

model Client {
  id           String              @id @default(cuid())
  name         String
  description  String?
  hashedSecret String
  storeId      String
  createdAt    DateTime            @default(now())
  updatedAt    DateTime            @updatedAt
  permissions  ClientPermissions[]

  @@unique([name, storeId])
}

model ClientPermissions {
  id           String     @id @default(cuid())
  clientId     String
  permissionId String
  client       Client     @relation(fields: [clientId], references: [id])
  permission   Permission @relation(fields: [permissionId], references: [id])
  createdAt    DateTime   @default(now())
}
